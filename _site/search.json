[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "R trainings",
    "section": "",
    "text": "Road to density maps creation\n\n\n\n\n\n\n\nnews\n\n\nmaps\n\n\ndensity functions\n\n\n\n\n\n\n\n\n\n\n\nDec 31, 2023\n\n\nAdrian Manzanal\n\n\n\n\n\n\n  \n\n\n\n\nHandle climatic data using AEMET API\n\n\n\n\n\n\n\nnews\n\n\nAEMET\n\n\n\n\n\n\n\n\n\n\n\nNov 23, 2023\n\n\nAdrian Manzanal\n\n\n\n\n\n\n  \n\n\n\n\nCreate map-charts using mapSpain\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\ngeolocalitation\n\n\n\n\n\n\n\n\n\n\n\nNov 21, 2023\n\n\nAdrian Manzanal\n\n\n\n\n\n\n  \n\n\n\n\nWelcome All\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 21, 2022\n\n\nAdrian Manzanal Oliva\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "docencia.html",
    "href": "docencia.html",
    "title": "Teaching",
    "section": "",
    "text": "Courses:"
  },
  {
    "objectID": "docencia.html#universidad-complutense-de-madrid",
    "href": "docencia.html#universidad-complutense-de-madrid",
    "title": "Teaching",
    "section": "Universidad Complutense de Madrid",
    "text": "Universidad Complutense de Madrid\n\nPolíticas Comercio Interior (2021-2022)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Create map-charts using mapSpain",
    "section": "",
    "text": "The purpose is to create quick map-charts using mapSpain library in R.\nLet´s go to show our data using maps!\n\n1. mapSpain library\nmapSpain is a package that provides spatial sf objects of the administrative boundaries of Spain, including CCAA, provinces and municipalities.\nmapSpain also provides a leaflet plugin to be used with the leaflet package, that loads several basemaps of public institutions of Spain, and the ability of downloading and processing static tiles.\nFull site with examples and vignettes on https://ropenspain.github.io/mapSpain/\nYou can install and activate the library following the instructions:\n\ninstall.packages(\"mapSpain\", dependencies = TRUE)\n\n\nlibrary(mapSpain)\n\n\ninstall.packages(\"sf\", dependencies = TRUE)\n\n\nlibrary(sf)\n\n\n\n2. Obtain CCAA Spain Map\nWe are going to extract basic Spain map which includes all CCAA. In order to be able to represent that data we need to add ggplot library to our project:\n\ninstall.packages(\"ggplot2\", dependencies = TRUE)\n\n\nlibrary(ggplot2)\n\nThe following fucntion (esp-get_ccaa) will generate a data frame that include geometry information for each CCAA:\n\nspain <- esp_get_ccaa() \n\nggplot() + geom_sf(data=spain)\n\n\n\n\n\n\n3. Joining data and map-chart\nFirst of all we are going to upload some data\nInflation data segmented by CCAA will be upload using the basic instruction. This data set has been downloaded from the INE website. It represents the inflation rates during the current year so far. You can choose the KPI that you are interested in, but the data set granularity should include CCAA detail.\n\ninstall.packages(\"tidyverse\", dependencies = TRUE)\n\n\nlibrary(tidyverse)\n\n\ninflation_df <- read.csv(\"inflacionccaa.csv\", header = TRUE, sep = \";\", check.names = F)\nglimpse(inflation_df)\n\nRows: 80\nColumns: 5\n$ `Comunidades y Ciudades Autonomas` <chr> \"Nacional\", \"Nacional\", \"Nacional\",…\n$ `Grupos ECOICOP`                   <chr> \"Indice general\", \"Indice general\",…\n$ `Tipo de dato`                     <chr> \"Indice\", \"Variacion mensual\", \"Var…\n$ Periodo                            <chr> \"2021M12\", \"2021M12\", \"2021M12\", \"2…\n$ Total                              <dbl> 111.52, 1.20, 6.50, 6.50, 111.46, 1…\n\n\nNow we are going to modify data in order to get the right information\nOriginal file contains some many different KPIs that explain prices’ variations. We are interested to see differences in annual rates (2021 vs 2022) by CCAA. In addition, CCAA IDs should be codified in order to match with the map-chart IDs.\n\ninflationOK_df <- inflation_df %>% \n  filter(`Tipo de dato` == \"Variacion anual\") %>% \n  filter(`Comunidades y Ciudades Autonomas` != \"Nacional\") %>% \n  mutate(iso2.ccaa.code = case_when(\n    str_detect(`Comunidades y Ciudades Autonomas`, \"01 AndalucIa\") ~ \"ES-AN\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"02 Aragon\") ~ \"ES-AR\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"03 Asturias. Principado de\") ~ \"ES-AS\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"04 Balears. Illes\") ~ \"ES-IB\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"05 Canarias\") ~ \"ES-CN\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"06 Cantabria\") ~ \"ES-CB\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"07 Castilla y Leon\") ~ \"ES-CL\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"08 Castilla - La Mancha\") ~ \"ES-CM\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"09 Cataluna\") ~ \"ES-CT\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"10 Comunitat Valenciana\") ~ \"ES-VC\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"11 Extremadura\") ~ \"ES-EX\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"12 Galicia\") ~ \"ES-GA\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"13 Madrid. Comunidad de\") ~ \"ES-MD\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"14 Murcia. Region de\") ~ \"ES-MC\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"15 Navarra. Comunidad Foral de\") ~ \"ES-NC\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"16 PaIs Vasco\") ~ \"ES-PV\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"17 Rioja. La\") ~ \"ES-RI\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"18 Ceuta\") ~ \"ES-CE\",\n    str_detect(`Comunidades y Ciudades Autonomas`, \"19 Melilla\") ~ \"ES-ML\"\n  )) %>% \n  select(-Periodo, -'Comunidades y Ciudades Autonomas')\n\ninflationOK_df \n\n   Grupos ECOICOP    Tipo de dato Total iso2.ccaa.code\n1  Indice general Variacion anual   6.7          ES-AN\n2  Indice general Variacion anual   7.2          ES-AR\n3  Indice general Variacion anual   6.2          ES-AS\n4  Indice general Variacion anual   6.5          ES-IB\n5  Indice general Variacion anual   5.8          ES-CN\n6  Indice general Variacion anual   6.8          ES-CB\n7  Indice general Variacion anual   7.3          ES-CL\n8  Indice general Variacion anual   7.6          ES-CM\n9  Indice general Variacion anual   6.1          ES-CT\n10 Indice general Variacion anual   6.8          ES-VC\n11 Indice general Variacion anual   7.1          ES-EX\n12 Indice general Variacion anual   6.7          ES-GA\n13 Indice general Variacion anual   6.2          ES-MD\n14 Indice general Variacion anual   6.3          ES-MC\n15 Indice general Variacion anual   6.6          ES-NC\n16 Indice general Variacion anual   6.4          ES-PV\n17 Indice general Variacion anual   7.0          ES-RI\n18 Indice general Variacion anual   5.5          ES-CE\n19 Indice general Variacion anual   6.9          ES-ML\n\n\nJoining Spain Map and Inflation data\nThen we will include inflation data from the csv into spain map table.\n\nspainok <- left_join(spain, inflationOK_df, by = \"iso2.ccaa.code\")\n\n\n\n4. Creating the map-chart with the inflation information\nLast step it is more easy, start to draw\nIt is very important to declare the numeric variable that we want to “paint”. In our case it is “Total”.\n\nggplot() + geom_sf(data=spainok, aes(fill = Total)) + \n  scale_fill_continuous(low=\"yellow\",high=\"red\") +\n  geom_sf(data = esp_get_can_box(), colour = \"grey50\")\n\n\n\n\nFull site with more examples and vignettes on https://ropenspain.github.io/mapSpain/"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome All",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Publications:"
  },
  {
    "objectID": "research.html#economics-2017-2018",
    "href": "research.html#economics-2017-2018",
    "title": "Research",
    "section": "Economics 2017-2018",
    "text": "Economics 2017-2018\n\nEl sector naval de Corea del Sur y España: Análisis comparado de los principales indicadores de competetitividad"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Adrián Manzanal Oliva",
    "section": "",
    "text": "Welcome to my blog. Here you will find some personal and profesional information about me.\nAlso you can find some R exercises that could be useful if you are learning R code.\nHope it helps!\nAdri."
  },
  {
    "objectID": "posts/aemet/index.html",
    "href": "posts/aemet/index.html",
    "title": "Handle climatic data using AEMET API",
    "section": "",
    "text": "Start to download historical data and 4 days forecast.\nQuick weather information\nThe goal of climaemet is to serve as an interface to download the climatic data of the Spanish Meteorological Agency (AEMET) directly from R using their API and create scientific graphs (climate charts, trend analysis of climate time series, temperature and precipitation anomalies maps, “warming stripes” graphics, climatograms, etc.).\nBrowse manual and vignettes at https://ropenspain.github.io/climaemet/.\n\n1. climaemet library and registration\nYou can install the released version of climaemet from CRAN with:\n\ninstall.packages(\"climaemet\", dependencies = TRUE)\n\n\nlibrary(climaemet)\n\nAfter install the package you have to register in the following URL in order to get the API key. Once you receive your ID key you have sig in using the following function:\n\nbrowseURL(\"https://opendata.aemet.es/centrodedescargas/obtencionAPIKey\")\n\n\n\n\nOnce you receive your ID key you have to sig in using the following function:\n\naemet_api_key(\"YOUR ID KEY\", install = TRUE, overwrite = TRUE)\n\nIt would be useful to prepare these library for next steps..\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(broom)\nlibrary(mapSpain)\nlibrary(ggmap)\nlibrary(sf)\nlibrary(ggplot2)\n\n\n\n2. Historical data by weather station\nAemet database contains historical weather data from 291 stations:\n\n\n\n\n\nIn order to see stations we are going to download the relation table which contains all of them and the ID:\n\nstations <- aemet_stations() \nhead(stations)\n\n# A tibble: 6 × 7\n  indicativo indsinop nombre               provincia altitud longitud latitud\n  <chr>      <chr>    <chr>                <chr>       <dbl>    <dbl>   <dbl>\n1 0252D      \"08186\"  ARENYS DE MAR        BARCELONA      74     2.54    41.6\n2 0076       \"08181\"  BARCELONA AEROPUERTO BARCELONA       4     2.07    41.3\n3 0200E      \"\"       BARCELONA, FABRA     BARCELONA     408     2.12    41.4\n4 0201D      \"08180\"  BARCELONA            BARCELONA       6     2.2     41.4\n5 0149X      \"08174\"  MANRESA              BARCELONA     291     1.84    41.7\n6 0229I      \"08192\"  SABADELL AEROPUERTO  BARCELONA     146     2.10    41.5\n\n\nSelect the station that you want to analyze\n\nstation <- \"2661\" # Leon\n\nNow we are going to download daily climatic data for this station between 2012 and 2023 using the following function: “aemet_daily_clim”. This dataset contains multiple clima variables. We are interested on temperatures (average, minimal and max.). After filtrating teperatures we should convert to longer format help us to create time series charts.\n\nleon_2023 <-\n  aemet_daily_clim(station, start = \"2012-01-01\", end = \"2023-11-30\") %>% \n  select(fecha, tmed, tmax, tmin) |> \n  pivot_longer(cols=c(\"tmed\", \"tmax\", \"tmin\"),\n               names_to= \"variable\",\n               values_to=\"temp\")\n\nUsing “leon_2023” object, we can create the chart which contains daily historic temperatures in Leon:\n\nggplot(leon_2023, aes(x = fecha, y = temp, group = variable, color = variable)) +\n  geom_line(linewidth = 0.2) +\n  scale_y_continuous(\n    labels = scales::label_comma(suffix = \"º\")) +\n  scale_color_manual(values = c(\"#EE9322\",\"grey\",\"#78D6C6\"), \n                     name = \"Temperature\") +\n  theme_minimal()+\n  labs(title = \"Leon\",\n       subtitle = \"Daily Temperatures, 2012-2023\",\n       x = \"\", y =\"\") +\n  theme(\n    legend.position = \"top\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(size = 28, face = \"bold\", family = \"serif\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 19),\n    axis.text = element_text(size = 16),\n    legend.text = element_text(size = 18)\n  )\n\n\n\n\n\n\n3.Clima Forecast\nIf you are interested to know Aemet forecast, using “aemet_forecast_daily” you will be able to download clima variables by county.\nusing aemet_munic we are going to create an array which contains countys IDs.\n\nvarios_munis <- aemet_munic  %>% \n  filter(municipio_nombre %in% c(\"Loeches\", \"León\", \"Potes\", \"Gandia\"))  %>%    \n  pull(municipio)\n\ndaily <- aemet_forecast_daily(varios_munis)\n\nTo review available variables\n\naemet_forecast_vars_available(daily)\n\n[1] \"probPrecipitacion\" \"cotaNieveProv\"     \"estadoCielo\"      \n[4] \"viento\"            \"rachaMax\"          \"temperatura\"      \n[7] \"sensTermica\"       \"humedadRelativa\"  \n\n\nNow lets select those variable that we are interested on.\n\ntemp_diaria <- aemet_forecast_tidy(daily, \"temperatura\")\n\n\ntemp_diaria_limpio <- temp_diaria  |> \n  select(\n    elaborado, fecha, municipio, nombre, temperatura_minima,\n    temperatura_maxima\n  )  |> \n  tidyr::pivot_longer(cols = contains(\"temperatura\"))\n\nTime to chartering\n\nggplot(temp_diaria_limpio) +\n  geom_line(aes(fecha, value, color = name), linewidth = 1) +\n  geom_point(aes(fecha, value, color = name), size = 1.9) +\n  facet_wrap(~nombre, ncol = 2) +   # que haga un gráfico para cada municipio\n  scale_color_manual(\n    values = c(\"#EE9322\", \"#78D6C6\"),\n    labels = c(\"max\", \"min\")\n  ) +\n  scale_x_date(\n    labels = scales::label_date_short(),\n    breaks = \"day\"\n  ) +\n  scale_y_continuous(\n    labels = scales::label_comma(suffix = \"º\"),\n    limits = c(0,30)\n  ) +\n  theme_minimal() +\n  labs(\n    x = \"\", y = \"\",\n    color = \"\",\n    title = \"Some Countys\",\n    subtitle = \"Temperatures forecast for next 7 days\",\n    caption = paste(\n      \"Created \",\n      format(temp_diaria_limpio$elaborado[1], usetz = TRUE)\n    )\n  )  +\n  theme(\n    legend.position = \"top\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(size = 28, face = \"bold\", family = \"serif\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 19),\n    axis.text = element_text(size = 16),\n    legend.text = element_text(size = 18),\n    strip.text = element_text(size = 18)\n  )\n\nWarning: Removed 12 rows containing missing values (`geom_point()`).\n\n\n\n\n\nFull site with more examples and vignettes on https://ropenspain.github.io/climaemet/"
  },
  {
    "objectID": "posts/density maps/index.html",
    "href": "posts/density maps/index.html",
    "title": "Road to density maps creation",
    "section": "",
    "text": "Lets paint your density maps using R\nDifferent ways to create density maps\nIt would be useful to prepare these libraries for next steps..\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(mapSpain)\nlibrary(ggmap)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(climaemet)\nlibrary(stars)\nlibrary(gstat)\n\nSometimes datasets are not geolocated in a similar way. There are some areas crowed of data and other areas with no data. In order to explain how to calculate the estimated information for these “empty” areas we are going to start using AEMET temperatures data by day and weather station:\n\n\n\n\n\nTo learn how to connect to “climaemet” package please see the previous post “Handle climatic data using AEMET API”.\n\n1. Extract clima data and Spain SF map.\n\n #Historical Date\n fecha_select <- \"2023-11-01\"\n \n #Extract clima data for this day:\n clim_data <- aemet_daily_clim(\n   start = fecha_select, end = fecha_select,\n   return_sf = TRUE\n )\n \n #Select min temperatures and remove Canary Islands:\n clim_data_clean <- clim_data  |> \n   filter(!provincia %in% c(\"LAS PALMAS\", \"STA. CRUZ DE TENERIFE\"))  |> \n   dplyr::select(fecha, tmin)  |> \n   filter(!is.na(tmin))\n \n #From mapSpain we download the SF:\n esp_sf <- esp_get_ccaa(epsg = 4326) |> \n   filter(ine.ccaa.name != \"Canarias\") \n\n\n\n2. Create the GRID to interpolate/estimate data.\nTo interpolate data between weather stations it is important to create a grill. In order to adjust the same number of spaces we divided Spain area by small cells (10km)\n\nmapa.sf <- st_as_sf(esp_sf, coords = geometry) # Spain map has been selected to be converted to SF\n\n\nst_bbox(mapa.sf) %>% \n  st_as_stars(mapa.sf = 10000) %>% # Using Spain SF object we are going to create 10 km cells grill.\nst_crop(mapa.sf) -> grd \n\nplot(grd, main=\"GRID\", col=\"cadetblue3\", breaks=\"equal\")\n\n\n\n\n\n\n3. First interpolation Approach: Thiessen Polynomials.\nThis methodological approach allows us to create areas for this data point. These calculated areas are equivalent distributed depending the distance between each of the original points.\n\nthiessen <- krige(tmin ~ 1, clim_data_clean, grd, nmax = 1)\n\n[inverse distance weighted interpolation]\n\nplot(thiessen)\n\n\n\nggplot() +\n  geom_stars(data = thiessen, aes(fill = var1.pred, x = x, y = y)) +\n  geom_sf(data = st_cast(esp_sf, \"MULTILINESTRING\")) +\n  geom_sf(data = clim_data_clean, color = \"#EE9322\") +\n  scale_fill_gradientn(colours = sf.colors(20), na.value=NA) +\n  theme_void() +\n  labs(\n    title = \"Minimal Temperatures\",\n    subtitle = \"December 2023\"\n  ) +\ntheme_void()\n\nWarning: Removed 35910 rows containing missing values (`geom_raster()`).\n\n\n\n\n\n\n\n4. IDW Interpolation\n\ni = idw(tmin ~ 1, clim_data_clean, grd)\n\n[inverse distance weighted interpolation]\n\n  ## [inverse distance weighted interpolation]\nggplot() + geom_stars(data = i, aes(fill = var1.pred, x = x, y = y)) + # IDW Prediction\n  geom_sf(data = st_cast(mapa.sf, \"MULTILINESTRING\")) + # Spain map shape\n  xlab(\"Longitud\") + ylab(\"Latitud\") + # Axis names\n  labs(\n    title = \"Minimal Temperatures\",\n    subtitle = \"December 2023\"\n  )  + # Title\n  scale_fill_gradientn(colours = sf.colors(20), na.value=NA)+ # Colours\n  theme_void() \n\nWarning: Removed 35910 rows containing missing values (`geom_raster()`)."
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "Adrian Manzanal Oliva"
  }
]